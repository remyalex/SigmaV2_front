 /**
  * Método encargado de construir una instancia de la clase
  *
  * @param http Peticion de protocolo http para realizar envío al servidor
  * @param appSettings Opciones de construcción del protocolo http para envio de petición al servidor
  * @param dataGeneric Referencia al servicio por el cual se obtendrán los datos requeridos
  */
  constructor(
    private http: HttpClient,
    private appSettings: AppSettings,
    private dataGeneric: DataGenericService,
  )

----------------------------------------------------------------------------------------------------

  /**
   * Método encargado de obtener los datos de una lista
   * dado el path de esta y el id correspondiente.
   *
   * @param path Cadena de texto que indica la ruta de la
   * lista de la cual se obtendrá información
   *
   * @param id Identificador de el item de la lista por el cual
   * se desea filtrar los items de la lista
   **/
  searchByList(path: string, id: number)
  
----------------------------------------------------------------------------------------------------


/**
   * Método encargado de invocar la busqueda de mantenimientos que
   * correspondan con los criterios indicados como parámetros
   *
   * @param criteria Objeto con los campos y valores por los
   * cuales se realizará la búsqueda según el formulario de busqueda
   * del componente SigmaGrid.
   */
  search(criteria: 

----------------------------------------------------------------------------------------------------
  
  
  /**
   * Método encargado de generar la petición al servidor para listar los registros
   * según el mantenimiento indicado
   *
   * @param idMantenimiento Id del mantenimiento sobre el cual se desea realizar el
   * la petición
   */
  listRecords(idMantenimiento: Number): Observable<GestionarProcesosModel[]>
  
  
----------------------------------------------------------------------------------------------------
    
  /**
   * Método encargado de generar la petición al servidor para la búsqueda
   * de todos los registros de {nombre_modelo}
   */
  list (): Observable

----------------------------------------------------------------------------------------------------
  
  
   /**
   * Método encargado de generar la petición al servidor para la creación de
   * un registro de {nombre_modelo}.
   *
   * @param {nombre_modelo} Objeto de tipo modelo con los datos del nuevo
   * registro a almacenar
   */
  create (

----------------------------------------------------------------------------------------------------
  
  
 /**
   * Método encargado de generar la petición al servidor para la actualización de
   * un registro de {nombre_modelo}.
   *
   * @param {nombre_modelo} Objeto de tipo modelo con los datos del
   * registro que se va a actualizar
   */
  update (
  
----------------------------------------------------------------------------------------------------

  /**
   * Método encargado de generar la petición al servidor para la
   * consulta de información de un registro de {nombre_modelo}.
   *
   * @param {nombre_modelo} Objeto de tipo modelo con los datos del
   * registro que se va a consultar
   */
  detail (
  
----------------------------------------------------------------------------------------------------
  
  /**
   * Método encargado de generar la petición al servidor para la eliminación de
   * un registro de {nombre_modelo}.
   *
   * @param {nombre_modelo} Objeto de tipo modelo con los datos del
   * registro que se va a eliminar
   */
  delete (
  
----------------------------------------------------------------------------------------------------



/**
 * Componente de servicio usado para gestionar las peticiones de componente
 * con el que interactúa el usuario hacia el componente de servidor
 */
@Injectable({

